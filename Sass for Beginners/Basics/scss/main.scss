// ======================
// PARTIALS
// ======================

@import './resets';
@import './variables';


// ======================
// FUNCTIONS
// ======================

// Function: Retrieve the font weight without using "map-get"
@function weight($weight-name) {
    @return map-get($font-weights, $weight-name);
}


// ======================
// MIXINS
// ======================

// Mixin: Center with Flexbox
@mixin flexCenter($direction) {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
}

// Mixin: Theme for the website (light/dark)
@mixin theme($light-theme: true) {
    @if $light-theme {

        // Lighten the background color and darken the text color
        background: lighten($primary-color, 100%);
        color: darken($text-color, 100%);
    }
}

// Mixin: Change attributes based on screen size
@mixin mobile() {
    @media (max-width: $mobile) {
        @content 
    }
}

// ======================
// SELECTORS
// ======================

body {
    background-color: $primary-color;
    color: $text-color;
}

.main {
    // Display flex: Center content
    @include flexCenter(row);

    width: 80% - 10%;
    margin: 0 auto;

    // You can use & as a synonym of the parent (& = .main)
    // To include ".main_paragraph" inside the parent we must use interpolation)
    #{&}_paragraph1 {

        // Get font weight from map (key value pair)
        font-weight: weight(bold);

        // Edit the "hover" attribute from the parent
        &:hover {
            color: pink;
        }
    }

    #{&}_paragraph2 {

        // Inherit all the styles of paragraph 1 onto paragraph 2
        @extend .main_paragraph1;

        // Change the hover behavior of the paragraph
        &:hover {
            color: $accent-color;
        }
    }

    // Change layout depending on the screen size
    // (Adds a media query with the content inside the brackets as the content for the query)
    @include mobile {
        flex-direction: column;
    }
}

// If true, the "lighten" and "darken" styles inside the mixin will be applied
// If false, no styles will be added, leaving the "light" class empty. This causes the
// compiler to ignore the class when compiling the SCSS file.
.light {
    @include theme($light-theme: false);
}